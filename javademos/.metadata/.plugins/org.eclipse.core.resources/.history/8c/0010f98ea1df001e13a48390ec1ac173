package com.bookapp.testcases;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.junit.platform.runner.JUnitPlatform;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import com.bookapp.exception.BookNotFoundException;
import com.bookapp.model.Book;
import com.bookapp.service.IBookService;
import com.bookapp.service.OrderDetails;

@RunWith(JUnitPlatform.class)
@ExtendWith(MockitoExtension.class)
class OderDetailTestcase {
	@Mock
	IBookService bookService;
	
	@InjectMocks
	OrderDetails details;
	
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}
	
	List<Book> bookList;
	Book book1,book2,book3,book4,book5,book6;
	@BeforeEach
	void setUp() throws Exception {
		book1=new Book("bJava","katly",1900,1);
		book2=new Book("eSpring","katly",800,2);
		book4=new Book("cLeadership","katly",800,4);
		book5=new Book("aJSP","katly",1900,5);
		book6=new Book("dMiracle","katly",1900,6);
		bookList=Arrays.asList( book1,book2,book3,book4,book5,book6);
	}

	@AfterEach
	void tearDown() throws Exception {
	}

	@Test
	void testShowbooks() {
		String author="katly";
		List<Book> BooksByAuthor=Arrays.asList(book1,book2,book4,book5,book6);
		Mockito.when(bookService.getByAuthor(author)).thenReturn(BooksByAuthor);
		List<Book> expected=Arrays.asList(book5,book1,book4,book6,book2);
		List<Book> actual=details.showBooks(author);
		assertEquals(expected, actual);
	}
	
	@Test
	void testNoBooks() {
		String author="nikhil";
		List<Book> BooksByAuthor=Arrays.asList(book1,book2,book4,book5,book6);
		Mockito.when(bookService.getByAuthor(author)).thenReturn(BooksByAuthor);
		List<Book> expected=Arrays.asList(book5,book1,book4,book6,book2);
		try {assertThrows(BookNotFoundException.class, ()->details.showBooks(author));
		}catch (Exception e) {
			System.out.println("found");
		}
		
		
		
	}
}
